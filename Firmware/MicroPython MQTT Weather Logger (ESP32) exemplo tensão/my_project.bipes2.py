#Code automatically generated by BIPES (http://www.bipes.net.br)
#Author: 'Nerval Junior'
#IOT ID: 0
#Description: 'My project'

import time
import machine
import network
import ujson
from umqtt.simple import MQTTClient
import ssd1306
from machine import Pin, I2C, ADC, PWM
import secrets

oled_width = 128
oled_height = 64

pino_sensor = ADC(Pin(34))
pino_sensor.atten(ADC.ATTN_11DB)
pino_sensor.width(ADC.WIDTH_10BIT)

i2c_rst = Pin(16, Pin.OUT)
i2c_rst.value(0)
time.sleep_ms(5)
i2c_rst.value(1)

i2c_scl = Pin(15, Pin.OUT, Pin.PULL_UP)
i2c_sda = Pin(4, Pin.OUT, Pin.PULL_UP)
i2c = I2C(scl=i2c_scl, sda=i2c_sda)
oled = ssd1306.SSD1306_I2C(oled_width, oled_height, i2c)
oled.fill(0)

MQTT_CLIENT_ID=secrets.MQTT_CLIENT_ID
MQTT_BROKER = secrets.MQTT_BROKER
MQTT_USER = secrets.MQTT_USER
MQTT_PASSWORD = secrets.MQTT_PASSWORD
MQTT_TOPIC1 = secrets.MQTT_TOPIC1
MQTT_TOPIC2 = secrets.MQTT_TOPIC2

SSID = secrets.SSID
PASSWORD = secrets.PASSWORD

zmptPin = machine.ADC(Pin(34))
ssrPin = PWM(Pin(2), freq=1000, duty=0)
potenciometro_pin = machine.Pin(37)
adc = machine.ADC(potenciometro_pin)

def setup_wifi():
    print("Connecting to WiFi", end="")
    sta_if = network.WLAN(network.STA_IF)
    sta_if.active(True)
    sta_if.connect(SSID, PASSWORD)

    connecting_message = "Connecting to WiFi"
    connecting_dots = ""

    while not sta_if.isconnected():
        connecting_dots += "."
        if len(connecting_dots) > 3:
            connecting_dots = ""
        oled.fill(0)
        oled.text(connecting_message, 0, 16)
        oled.text("Please wait...", 0, 32)
        oled.text(connecting_dots, 0, 48)  
        oled.show()

        print(".", end="")
        time.sleep(0.1)

    print("Connected to WiFi!")

def callback(topic, msg):
    print("Mensagem recebida no tpico:", topic)
    print("Mensagem:", msg)

def connect_to_mqtt():
    client = MQTTClient(MQTT_CLIENT_ID, MQTT_BROKER, user=MQTT_USER, password=MQTT_PASSWORD)
    client.set_callback(callback)
    client.connect()
    client.subscribe(MQTT_TOPIC1)
    return client

def publish_to_mqtt(client,topic ,message):
    client.publish(topic, message)

def read_and_publish_data(client):
    leitura = adc.read()
    ssrPin.duty(int(leitura))
    zmptValue = zmptPin.read()
    
    valor_resistencia = leitura * 3.3 / 1023
    time.sleep(0.001)

    message = ujson.dumps({"potenciometro": leitura, "resistencia": valor_resistencia, "Vrms": (zmptValue / 4095.0) * 3.3})
    print("Reporting to MQTT topic {}: {}".format(MQTT_TOPIC1, message))
    publish_to_mqtt(client,MQTT_TOPIC1 ,message)

    oled.fill(0)
    oled.text("Potenciometro:", 0, 0)
    oled.text(str(leitura), 0, 16)
    oled.text("Voltage (V):", 0, 32)
    oled.text("{:.2f}".format(valor_resistencia), 0, 48)
    oled.show()

def main():
    setup_wifi()
    client = connect_to_mqtt()

    while True:
        client.check_msg()
        ac_read = pino_sensor.read()
        maior_valor = 0
        corrente_inst = [0] * 300

        for i in range(300):
            corrente_inst[i] = pino_sensor.read()
            if maior_valor < corrente_inst[i]:
                maior_valor = corrente_inst[i]

        tensao_pico = ((maior_valor - 500) * (313 - 0)) / (661 - 500)
        tensao_rms = tensao_pico / 1.4

        json_payload = {
            "tensao_rms": round(tensao_rms, 2),
            "tensao_pico": round(tensao_pico, 2),
            "acRead": ac_read
        }

        publish_to_mqtt(client, MQTT_TOPIC2 ,ujson.dumps(json_payload))
        read_and_publish_data(client)
        time.sleep(1)

if __name__ == "__main__":
    main()


